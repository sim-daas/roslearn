import os
from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument
from launch.substitutions import LaunchConfiguration
from launch_ros.actions import Node
from launch_ros.substitutions import FindPackageShare
import subprocess

def generate_launch_description():
    # Get the package directory
    pkg_share = FindPackageShare(package='rostut').find('rostut')
    
    # Declare launch arguments
    use_sim_time_arg = DeclareLaunchArgument(
        'use_sim_time',
        default_value='true',
        description='Use simulation time if true'
    )
    
    # RViz2 for visualization
    rviz2_cmd = Node(
        package='rviz2',
        executable='rviz2',
        name='rviz2',
        output='screen',
        parameters=[{
            'use_sim_time': LaunchConfiguration('use_sim_time'),
          #  'config_file': os.path.join(pkg_share, 'config', 'robot.rviz')
        }]
    )
    
    # Joint State Publisher GUI for manual joint control
    joint_state_publisher_gui_node = Node(
        package='joint_state_publisher_gui',
        executable='joint_state_publisher_gui',
        name='joint_state_publisher_gui',
        output='screen',
    )
    
    # Robot State Publisher
    # Robot State Publisher
    
    # Process xacro file to generate URDF
    xacro_file = os.path.join(pkg_share, 'urdf', 'robot.urdf.xacro')
    robot_description = subprocess.check_output([
        'xacro', xacro_file
    ]).decode('utf-8')
    
    robot_state_publisher_node = Node(
        package='robot_state_publisher',
        executable='robot_state_publisher',
        name='robot_state_publisher',
        output='screen',
        parameters=[{
            'use_sim_time': LaunchConfiguration('use_sim_time'),
            'robot_description': robot_description
        }]
    )

    return LaunchDescription([
        use_sim_time_arg,
        rviz2_cmd,
        joint_state_publisher_gui_node,
        robot_state_publisher_node,
    ])
